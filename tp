data TTree k v = Node k (Maybe v) (TTree k v) (TTree k v) (TTree k v) | Leaf k v | E

{-
t= (Node 'r' Nothing E (Node 'e' (Just 16) (Node 'a' Nothing  E (Leaf 's' 1) E) (Node 'o' (Just 2) (Leaf 'd' 9) E (Leaf 's' 4)) E) (Node 's' Nothing E (Node 'i' (Just 4) (Leaf 'e' 8)(Leaf 'n' 7) E) E))
-}

search :: Ord k => [k] -> TTree k v -> Maybe v
search _ E = Nothing
search [x] (Leaf k v) | x == k    = Just v 
					  | otherwise = Nothing
search _ (Leaf k v) = Nothing
search [x] (Node k v l e r)    | x == k    = v
							   | x < k     = search [x] l
							   | otherwise = search [x] r
search (x:xs) (Node k v l e r) | x == k    = search xs e
							   | x < k     = search (x:xs) l
							   | otherwise = search (x:xs) r 			

-- insert :: Ord k => [k] -> v -> TTree k v -> TTree k v
insert [x] v (Node k v2 l e r)    | x == k    = insert xs v e
                                  |
                                  |
                                  |
                                  |
                                  |
insert (x:xs) v (Node k v2 l e r) | x == k    = insert xs v e
                                  | x < k     = insert (x:xs) v l
                                  | otherwise = insert (x:xs) v r

-- delete :: Ord k => [k] -> TTree k v -> TTree k v


-- keys :: TTree k v -> [[k]]
